// üî• –£–î–ê–õ–ï–ù–û: Supabase JS SDK –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è upload.js
// const SUPABASE_URL = '...';
// const SUPABASE_ANON_KEY = '...';
// const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\

// üîµ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
const logBlock = document.getElementById('log');
const statusMessageElement = document.getElementById('statusMessage'); // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –≤–∫–ª—é—á–∞—è –ª–æ–∞–¥–µ—Ä.
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {boolean} showLoader - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ª–æ–∞–¥–µ—Ä.
 * @param {string} color - –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
function updateStatusMessage(message, showLoader = false, color = '#555') {
    statusMessageElement.style.color = color;
    if (showLoader) {
        statusMessageElement.innerHTML = `<img src="bot-icon.svg" class="loader-icon" alt="Loading"> ${message}`;
    } else {
        statusMessageElement.innerHTML = message;
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–ª–æ–∫ –ª–æ–≥–æ–≤.
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {'info' | 'success' | 'error' | 'warning' | 'loading'} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏ —Ü–≤–µ—Ç–∞.
 */
function log(message, type = 'info') {
  const timestamp = new Date().toLocaleTimeString();
  let prefix = '';
  let color = '#333'; // default color

  if (type === 'success') {
    prefix = '‚úÖ';
    color = '#28a745';
  } else if (type === 'error') {
    prefix = '‚ùå';
    color = '#dc3545';
  } else if (type === 'warning') {
    prefix = '‚ö†Ô∏è';
    color = '#ffc107';
  } else if (type === 'info') {
    prefix = '‚ÑπÔ∏è';
    color = '#17a2b8';
  } else if (type === 'loading') {
    prefix = '‚è≥';
    color = '#007bff';
  }

  const logEntry = document.createElement('p');
  logEntry.style.color = color;
  logEntry.innerHTML = `<strong>${timestamp} ${prefix}</strong> ${message}`;
  logBlock.prepend(logEntry); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
}

function clearLogs() {
  logBlock.innerHTML = '';
  updateStatusMessage(''); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
}

// üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async function processFile(file) {
  updateStatusMessage(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ \"${file.name}\"...`, true, '#007bff');
  log(`–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${file.name}`, 'info');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±–æ–ª–µ–µ 5 –ú–ë)
  const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5 MB
  if (file.size > MAX_FILE_SIZE) {
    log(`‚ùå –§–∞–π–ª \"${file.name}\" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(file.size / (1024 * 1024)).toFixed(2)} –ú–ë). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${MAX_FILE_SIZE / (1024 * 1024)} –ú–ë.`, 'error');
    updateStatusMessage(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ \"${file.name}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.`, false, '#dc3545');
    return; // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)
  if (!file.type.startsWith('text/')) {
    log(`‚ùå –§–∞–π–ª \"${file.name}\" –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø (${file.type}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.`, 'error');
    updateStatusMessage(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ \"${file.name}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.`, false, '#dc3545');
    return; // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
  }


  try {
    const fileContent = await file.text(); // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    log(`–§–∞–π–ª \"${file.name}\" —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω. –†–∞–∑–º–µ—Ä: ${fileContent.length} –±–∞–π—Ç.`, 'success');

    // üî• –ù–û–í–´–ï –õ–û–ì–ò: –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log(`[upload.js DEBUG] File name being sent: "${file.name}"`);
    console.log(`[upload.js DEBUG] Type of file content being sent: ${typeof fileContent}`);
    console.log(`[upload.js DEBUG] Length of file content being sent: ${fileContent.length}`);
    if (fileContent.length > 0) {
        console.log(`[upload.js DEBUG] First 50 chars of file content being sent: "${fileContent.substring(0, Math.min(fileContent.length, 50))}"`);
    } else {
        console.log(`[upload.js DEBUG] File content is empty.`);
    }
    // üî• –ö–û–ù–ï–¶ –ù–û–í–´–• –õ–û–ì–û–í

    const response = await fetch('/upload', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        fileName: file.name,
        fileContent: fileContent,
      }),
    });

    const responseData = await response.json();

    if (response.ok) {
      log(`‚úÖ –§–∞–π–ª \"${file.name}\" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ß–∞–Ω–∫–æ–≤: ${responseData.chunksCount || 'N/A'}`, 'success');
      updateStatusMessage(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ \"${file.name}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`, false, '#28a745'); // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä, –∑–µ–ª–µ–Ω—ã–π
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ \"${file.name}\": ${responseData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
      updateStatusMessage(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ \"${file.name}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π.`, false, '#dc3545'); // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä, –∫—Ä–∞—Å–Ω—ã–π
    }

  } catch (e) {
    log(`–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${e.message}`, 'error');
    updateStatusMessage(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ \"${file.name}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π.`, false, '#dc3545'); // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä, –∫—Ä–∞—Å–Ω—ã–π
  }
}

// üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Ñ–∞–π–ª–æ–≤
function handleFiles(files) {
  clearLogs(); // üî• –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
  Array.from(files).forEach(file => {
    processFile(file);
  });
}

// üü° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  const dropzone = document.getElementById('dropzone');
  const input = document.getElementById('fileInput');

  dropzone.addEventListener('click', () => input.click());

  dropzone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropzone.classList.add('dragover');
  });

  dropzone.addEventListener('dragleave', () => {
    dropzone.classList.remove('dragover');
  });

  dropzone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropzone.classList.remove('dragover');
    if (e.dataTransfer.items) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º DataTransferItemList –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
      handleFiles(Array.from(e.dataTransfer.items)
                        .filter(item => item.kind === 'file')
                        .map(item => item.getAsFile()));
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º DataTransfer –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      handleFiles(e.dataTransfer.files);
    }
  });

  input.addEventListener('change', (e) => {
    handleFiles(e.target.files);
  });
});