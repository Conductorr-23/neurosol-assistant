// assistant.js

document.addEventListener('DOMContentLoaded', () => {
    // 1) –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤—Å–µ—Ö fetch
    const API_BASE = window.location.origin;

    const form = document.getElementById('form');
    const input = document.getElementById('input');
    const chat = document.getElementById('chat');
    const onboardingSection = document.getElementById('onboarding-section');

    // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    const messages = [];

    // 2) userId —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ localStorage
    let userId = localStorage.getItem('userId');
    if (!userId) {
        userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('userId', userId);
    }

    // 3) sessionId —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ sessionStorage (–¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫)
    let currentSessionId = sessionStorage.getItem('sessionId');
    function isUUID(u) {
        return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(u);
    }
    if (currentSessionId && !isUUID(currentSessionId)) {
        sessionStorage.removeItem('sessionId');
        currentSessionId = null;
    }

    // 4) –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π-–æ—à–∏–±–æ–∫)
    function saveHistory() {
        if (!currentSessionId) return;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º "—Å—ã—Ä–æ–π" –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–∞–∫ –æ–Ω –ø—Ä–∏—à–µ–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (Markdown –∏–ª–∏ HTML-–æ—à–∏–±–∫–∞)
        const toSave = messages.filter(m =>
            !(m.role === 'assistant' && m.content.includes('class="error"'))
        );
        sessionStorage.setItem(`chat_${currentSessionId}`, JSON.stringify(toSave));
    }

    // 5) –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å sessionId
    if (currentSessionId) {
        const saved = sessionStorage.getItem(`chat_${currentSessionId}`);
        if (saved) {
            try {
                const hist = JSON.parse(saved);
                hist.forEach(m => {
                    let displayContent = m.content;
                    // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å Markdown,
                    // –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞. marked.js –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏ Markdown.
                    // –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç HTML, –Ω–æ marked.parse() –¥–æ–ª–∂–µ–Ω
                    // —Å –Ω–∏–º–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è, –Ω–µ –ª–æ–º–∞—è –∏—Ö.
                    if (m.role === 'assistant') {
                        displayContent = marked.parse(m.content); 
                    }
                    appendMessage(m.role, displayContent);
                });
                // –í–∞–∂–Ω–æ: –≤ –º–∞—Å—Å–∏–≤ `messages` –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π, —Å—ã—Ä–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (Markdown)
                // –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.
                messages.push(...hist); 
                onboardingSection.style.display = 'none';
            } catch (e) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:', e);
            }
        }
    } else {
        // –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ => –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        showOnboarding();
    }

    // 6) –ü—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä—É—á–Ω—É—é —Å–∫—Ä—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º textarea
    input.addEventListener('input', () => {
        if (onboardingSection.style.display !== 'none') {
            onboardingSection.style.display = 'none';
        }
        adjustTextareaHeight();
    });

    // 7) –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    function showOnboarding() {
        onboardingSection.innerHTML = '';
        onboardingSection.style.display = 'block';

        const intro = document.createElement('div');
        intro.className = 'onboarding-intro';
        intro.innerHTML =
            'Hello! I&rsquo;m the NeuroSOL Assistant.<br>' +
            'I&rsquo;m here to help you with Autism Spectrum Disorder and related developmental needs.<br>' +
            'Please choose one of the questions below.';
        onboardingSection.appendChild(intro);

        const questionsDiv = document.createElement('div');
        questionsDiv.id = 'onboarding';
        questionsDiv.className = 'onboarding-questions';
        const starterQs = [
            'What is autism?',
            'How can I help my child learn to communicate?',
            'Which therapy methods are most effective?'
        ];
        starterQs.forEach(text => {
            const btn = document.createElement('button');
            btn.className = 'onboarding-question';
            btn.textContent = text;
            btn.addEventListener('click', () => {
                onboardingSection.style.display = 'none';
                input.value = text;
                form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));
            });
            questionsDiv.appendChild(btn);
        });
        onboardingSection.appendChild(questionsDiv);

        const orDiv = document.createElement('div');
        orDiv.className = 'onboarding-custom';
        orDiv.textContent = 'or ask your own question üëá';
        onboardingSection.appendChild(orDiv);
    }

    // 8) –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    function createMessageRow(role, content, isLoading = false) {
        const row = document.createElement('div');
        row.className = `chat-row ${role}`;

        const icon = document.createElement('div');
        icon.className = 'chat-icon';
        if (!isLoading) {
            icon.innerHTML = role === 'user'
                ? '<img src="https://cdn-icons-png.flaticon.com/512/847/847969.png" width="32" height="32" alt="User"/>'
                : '<img src="bot-icon.svg" width="32" height="32" alt="Bot"/>';
        } else {
            icon.innerHTML = '<img src="bot-icon.svg" class="spinner" width="32" height="32" alt="Loading...">';
        }

        const bubble = document.createElement('div');
        bubble.className = `chat-bubble ${role}`;

        // –ó–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—É–∑—ã—Ä—è —Å–æ–æ–±—â–µ–Ω–∏—è
        // –î–ª—è –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º innerHTML, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É (–∏–∑ Markdown)
        if (role === 'bot' && !isLoading) {
            bubble.innerHTML = content; // content —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        } else if (isLoading) {
            bubble.textContent = '';
        } else {
            bubble.textContent = content; // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        }

        if (role === 'user') {
            row.appendChild(bubble);
            row.appendChild(icon);
        } else {
            row.appendChild(icon);
            row.appendChild(bubble);
        }

        return row;
    }

    function appendMessage(role, content, isLoading = false) {
        const row = createMessageRow(role, content, isLoading);
        chat.appendChild(row);
        chat.scrollTop = chat.scrollHeight;
        return row;
    }

    // 9) –ê–≤—Ç–æ-—Ä–æ—Å—Ç textarea
    function adjustTextareaHeight() {
        input.style.height = 'auto';
        requestAnimationFrame(() => {
            let currentScrollHeight = input.scrollHeight;
            const st = getComputedStyle(input);
            const minH = parseFloat(st.minHeight);
            const maxH = parseFloat(st.maxHeight);

            let newH = currentScrollHeight;
            newH = Math.max(minH, newH);
            newH = Math.min(maxH, newH);

            input.style.height = newH + 'px';
            input.style.overflowY = currentScrollHeight > minH ? 'auto' : 'hidden';
        });
    }

    // 10) –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Å–º–µ–Ω—ã —Ñ—Ä–∞–∑
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const question = input.value.trim();
        if (!question) return;

        onboardingSection.style.display = 'none';

        if (!currentSessionId) {
            currentSessionId = crypto.randomUUID();
            sessionStorage.setItem('sessionId', currentSessionId);
        }

        messages.push({ role: 'user', content: question });
        saveHistory();
        appendMessage('user', question);

        input.value = '';
        adjustTextareaHeight();

        const statuses = ['Searching for information', 'Checking documents', 'Preparing response'];
        let idx = 0;
        const loadingRow = appendMessage('bot', statuses[idx], true);
        const loadingBubble = loadingRow.querySelector('.chat-bubble.bot');
        const timer = setInterval(() => {
            idx = (idx + 1) % statuses.length;
            loadingBubble.textContent = statuses[idx];
        }, 2000);

        try {
            const res = await fetch(`${API_BASE}/chat`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ question, messages, userId, sessionId: currentSessionId }),
            });

            if (!res.ok) {
                let errData;
                try {
                    errData = await res.json();
                } catch {
                    errData = { answer: `Server error: ${res.status}` };
                }
                throw new Error(errData.answer || `Error ${res.status}`);
            }

            const data = await res.json();

            clearInterval(timer);
            chat.removeChild(loadingRow);

            if (data.sessionId && data.sessionId !== currentSessionId) {
                currentSessionId = data.sessionId;
                sessionStorage.setItem('sessionId', currentSessionId);
            }

            const rawAnswer = data.answer || '<span class="error">Sorry, no response.</span>';
            // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é marked.parse().
            // Marked.js –æ–±—ã—á–Ω–æ —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å HTML, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤ Markdown,
            // –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∏—Å—Ç—ã–π Markdown.
            const renderedAnswer = marked.parse(rawAnswer); 

            messages.push({ role: 'assistant', content: rawAnswer }); // –í –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π Markdown
            saveHistory();
            appendMessage('bot', renderedAnswer); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–∂–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π HTML

        } catch (err) {
            console.error('Fetch error:', err);
            clearInterval(timer);
            if (chat.contains(loadingRow)) chat.removeChild(loadingRow);
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ç–µ–≥–∏, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –Ω–µ –ø–∞—Ä—Å–∏–º.
            appendMessage('bot', `<span class="error">${err.message}</span>`); 
        } finally {
            adjustTextareaHeight();
        }
    });

    input.addEventListener('input', adjustTextareaHeight);
    window.addEventListener('load', adjustTextareaHeight); // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤–∫–ª—é—á–∞—è —Å—Ç–∏–ª–∏)
    window.addEventListener('resize', adjustTextareaHeight);
});